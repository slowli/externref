name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  msrv: 1.66.0
  nightly: nightly-2023-03-19
  binaryen: version_110

jobs:
  build-msrv:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.msrv }}
          override: true
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            target/
            crates/cli/target/
          key: ${{ runner.os }}-msrv-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-msrv-cargo

      # The E2E test uses `wasmtime` with frequently changing MSRV, so we don't test it here.
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p externref -p externref-macro --all-features --all-targets
      - name: Run CLI tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=crates/cli/Cargo.toml --all-features --all-targets
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p externref -p externref-macro --all-features --doc

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
      - name: Install wasm-opt
        run: |
          wget -q -O binaryen.tar.gz https://github.com/WebAssembly/binaryen/releases/download/$binaryen/binaryen-$binaryen-x86_64-linux.tar.gz && \
          tar xf binaryen.tar.gz && \
          sudo install "binaryen-$binaryen/bin/wasm-opt" /usr/local/bin
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            target/
            crates/cli/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo

      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Format CLI
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path=crates/cli/Cargo.toml -- --check

      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: all features"
          args: --workspace --all-features --all-targets -- -D warnings
      - name: Clippy (no features)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: no features"
          args: -p externref --no-default-features --lib -- -D warnings
      - name: Clippy (processor)
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: features=processor"
          args: -p externref --no-default-features --features=processor --lib -- -D warnings
      - name: Clippy CLI
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Clippy: CLI"
          args: --manifest-path=crates/cli/Cargo.toml --all-features --all-targets -- -D warnings

      # Build the E2E crate first to speed up its testing.
      - name: Build E2E test crate
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p externref-test --lib --target wasm32-unknown-unknown --profile wasm

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --all-targets
      - name: Run CLI tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=crates/cli/Cargo.toml --all-features --all-targets
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features --doc

  build-docker:
    needs:
      - build
      - build-msrv
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Docker build
        uses: actions/cache@v3
        with:
          path: target/docker
          key: ${{ runner.os }}-docker-buildkit-${{ hashFiles('crates/cli/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-docker-buildkit

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Log in to Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1
      - name: Identify Buildx container
        run: |
          CONTAINER_ID=$(docker ps --filter=ancestor=moby/buildkit:buildx-stable-1 --format='{{ .ID }}')
          echo "buildx_container=$CONTAINER_ID" | tee -a "$GITHUB_ENV"

      - name: Restore cache
        run: |
          if [[ -f target/docker/cache.db ]]; then
            docker cp target/docker/. "$BUILDER:/var/lib/buildkit"
            docker restart "$BUILDER"
            # Wait until the container is restarted
            sleep 5
          fi
          docker buildx du # Check the restored cache
        env:
          BUILDER: ${{ env.buildx_container }}

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: crates/cli/Dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # We want to only store cache volumes (type=exec.cachemount) since
      # their creation is computationally bound as opposed to other I/O-bound volume types.
      - name: Extract image cache
        run: |
          docker buildx prune --force --filter=type=regular
          docker buildx prune --force --filter=type=source.local
          rm -rf target/docker && mkdir -p target/docker
          docker cp "$BUILDER:/var/lib/buildkit/." target/docker
          du -ah -d 1 target/docker
        env:
          BUILDER: ${{ env.buildx_container }}

      - name: Test image (--help)
        run: docker run --rm "$IMAGE_TAG" --help
        env:
          IMAGE_TAG: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
      - name: Test image (transform)
        run: |
          docker run -i --rm --env RUST_LOG=externref=debug "$IMAGE_TAG" - \
            < crates/cli/tests/test.wasm \
            > /dev/null
        env:
          IMAGE_TAG: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

      - name: Publish image
        if: github.event_name == 'push'
        run: docker push "$IMAGE_TAG"
        env:
          IMAGE_TAG: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

  document:
    if: github.event_name == 'push'
    needs:
      - build
      - build-msrv
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          profile: minimal
          override: true
      - name: Generate lockfile
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-document-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: ${{ runner.os }}-document-cargo

      - name: Build docs
        run: |
          cargo clean --doc && cargo rustdoc -p externref --all-features -- --cfg docsrs \
            && cargo rustdoc -p externref-macro -- --cfg docsrs

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: target/doc
          single-commit: true
